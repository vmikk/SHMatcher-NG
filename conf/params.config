/*
Default values for the pipeline parameters
*/


// TODO:
// - strand ?

params {

  // Input data and databases
  input      = "input.fasta"
  ref_db_dir = "ref_db"            // MMseqs-formatted database   (directory containing multiple files)
  ref_db     = "ref_db.mmi"        // Minimap2-formatted database (single file)
  shdata     = "sh_matching/data"

  // Sequence similarity search method
  method = "minimap"               // mmseqs OR minimap

  // Pre-clustering parameters
  preclust_id        = 0.9
  preclust_cov       = 0.7
  preclust_kmers     = 100
  preclust_kmerscale = 0.3  // --kmer-per-seq-scale

  // MMSeqs2 search parameters (for SH database matching)
  search_id   = 0.9         // --min-seq-id
  search_cov  = 0.8         // -c
  cov_mode    = 5           // --cov-mode
  max_seqs    = 10000       // --max-seqs       // for pre-filtering step
  max_accept  = 2147483647  // --max-accept     // Maximum accepted alignments before alignment calculation for a query is stopped
  exact_kmer  = false       // --exact-kmer-matching
  spaced_kmer = 0           // --spaced-kmer-mode    // NB! database index must be created with this option!

  // Parameters used for MMSeqs2 and Minimap2
  kmer_length = 15          // -k
  top_hits    = 5           // Number of top hits per query to keep  (`--extract-lines` for MMseqs2) and custom option for Minimap2-parsing

  // Minimap2 search parameters
  minimap_n_candidates = 20  // Number of alignments to keep per query (before similarity filtering)  -N
  minimap_opts         = ""  // Additional options for Minimap2 (e.g., "-x map-ont")

}

/*
~~~~~~~~~~~~~ PARAMETERS of MMSeqs2

--cov-mode INT:
  0: coverage of query and target  (bidirectional coverage -> stricter matching?)
  1: coverage of target
  2: coverage of query
  3: target seq. length has to be at least x% of query length
  4: query seq. length has to be at least x% of target length
  5: short seq. needs to be at least x% of the other seq. length [0]

--kmer-per-seq-scale FLOAT:
  adds more k‑mers for longer sequences - "for every extra base, pick a bit more"
  If scale = 0, every sequence contributes the same number (the baseline).
  If scale > 0, longer sequences contribute more, which improves sensitivity for them.

-s, --start-sens, --sens-steps:
  NB! for nucleotide search, these options are not used by MMseqs!
  Also, with -s 6 and more, `--db-load-mode` is automatically set to 1 (which is slower), so do not use it!





~~~~~~~~~~~~~ TIPS

To decrease RAM usage,
- reduce `--max-seqs`
- set `--split-memory-limit`
- select smaller k-mer lengths (`-k`)
- reduce `--kmer-per-seq`


--db-load-mode:
  It tells MMseqs how to read DB files from disk.
  Mode 3 (mmap+touch) = map files into memory and proactively prefetch them (by "touching" pages) so the OS loads them into RAM upfront.
    This avoids stalls later and speeds repeated/large searches.
    Trade‑off: a short warm‑up time and more RAM usage vs smoother, faster processing once started.
    Use it when you have enough memory.

--max-accept:
  Using a low number may return only a "good enough" hit (not guaranteed to be the best),
  therefore maybe it's better to use a higher number and filter the results afterwards (using `top_hits` parameter).

*/
